# Generated by Django 4.2.10 on 2025-03-26 15:39

from django.db import migrations
import json

def convert_location_data(apps, schema_editor):
    Location = apps.get_model('api', 'Location')
    Trip = apps.get_model('api', 'Trip')
    Stop = apps.get_model('api', 'Stop')
    LogSheet = apps.get_model('api', 'LogSheet')

    # Helper function to create location
    def create_location_from_data(location_data):
        if not location_data:
            return None
        
        # Handle both string and dict inputs
        if isinstance(location_data, str):
            location_data = json.loads(location_data)
        
        if not isinstance(location_data, dict):
            return None

        location, _ = Location.objects.get_or_create(
            slug=location_data.get('slug'),
            defaults={
                'title': location_data.get('title'),
                'latitude': location_data.get('latitude'),
                'longitude': location_data.get('longitude')
            }
        )
        return location

    # Convert trip locations
    for trip in Trip.objects.all():
        # Current location
        if trip.current_location:
            current_loc = create_location_from_data(trip.current_location)
            if current_loc:
                trip.current_location_new = current_loc
        
        # Pickup location
        if trip.pickup_location:
            pickup_loc = create_location_from_data(trip.pickup_location)
            if pickup_loc:
                trip.pickup_location_new = pickup_loc
        
        # Dropoff location
        if trip.dropoff_location:
            dropoff_loc = create_location_from_data(trip.dropoff_location)
            if dropoff_loc:
                trip.dropoff_location_new = dropoff_loc
        
        # Fuel stop
        if trip.fuel_stop:
            fuel_loc = create_location_from_data(trip.fuel_stop)
            if fuel_loc:
                trip.fuel_stop_new = fuel_loc
        
        trip.save()

    # Convert stop locations
    for stop in Stop.objects.all():
        if stop.location:
            loc = create_location_from_data(stop.location)
            if loc:
                stop.location_new = loc
                stop.save()

    # Convert log sheet locations
    for log_sheet in LogSheet.objects.all():
        if log_sheet.start_location:
            start_loc = create_location_from_data(log_sheet.start_location)
            if start_loc:
                log_sheet.start_location_new = start_loc
        
        if log_sheet.end_location:
            end_loc = create_location_from_data(log_sheet.end_location)
            if end_loc:
                log_sheet.end_location_new = end_loc
        
        log_sheet.save()

def reverse_convert_location_data(apps, schema_editor):
    Location = apps.get_model('api', 'Location')
    Location.objects.all().delete()

class Migration(migrations.Migration):
    dependencies = [
        ('api', '0009_location_alter_logsheet_end_location_and_more'),
    ]

    operations = [
        migrations.RunPython(convert_location_data, reverse_convert_location_data),
    ]
